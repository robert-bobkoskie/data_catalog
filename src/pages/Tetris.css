/* Tetris.css */

/* CSS Reset to remove default margins and padding */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: Arial, sans-serif;
  overflow: hidden;
}

.tetris {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100vh; /* Full viewport height */
  overflow: hidden;
  position: fixed;
  left: 400px;
}

.game-container {
  display: flex;
  justify-content: center;
  align-items: flex-start;
}

.board {
  user-select: none;
  margin: auto;
  border: 2px solid black;
  display: grid;
  grid-template-rows: repeat(20, 30px); /* Assuming a 20-row board */
  grid-template-columns: repeat(10, 30px); /* Assuming a 10-column board */
  gap: 0; /* No gaps between cells */
}

.controls {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-left: 20px; /* Add margin to separate controls from the grid */
  margin-top: 0; /* Adjust this value to move the controls up */
  min-width: 200px; /* Set a minimum width to ensure consistent layout */
}

.start-game-button {
  font-size: 26px;
  padding: 10px;
  margin-top: 20px;
}

.arrow-buttons {
  display: grid;
  grid-template-areas:
    ". up ."
    "left . right"
    ". down .";
  gap: 5px; /* Reduce gap between arrows */
  justify-content: center;
  align-items: center;
  position: relative; /* Keep arrow controls stationary */
  top: -150px; /* Adjust this value to move the controls up */
  left: 150px; /* Adjust this value to move the controls to the right */
}

.arrow {
  width: 0;
  height: 0;
  border-style: solid;
  cursor: pointer;
}

.arrow.up {
  grid-area: up;
  border-width: 0 25px 35px 25px;
  border-color: transparent transparent black transparent;
}

.arrow.down {
  grid-area: down;
  border-width: 35px 25px 0 25px;
  border-color: black transparent transparent transparent;
}

.arrow.left {
  grid-area: left;
  border-width: 25px 35px 25px 0;
  border-color: transparent black transparent transparent;
}

.arrow.right {
  grid-area: right;
  border-width: 25px 0 25px 35px;
  border-color: transparent transparent transparent black;
}

.row {
  display: flex;
}

.cell {
  width: 30px;
  height: 30px;
  box-sizing: border-box; /* Include padding and border in the element's total width and height */
  background-color: transparent; /* Default to transparent to avoid any background color issues */
  border: none; /* Remove any border */
  outline: none; /* Remove any outline */
}

.cell.Empty {
  background-color: rgb(200, 200, 200);
}

.cell.I {
  background-color: cyan;
  border: 1px solid black; /* Add border only to shape cells */
}

.cell.J {
  background-color: blue;
  border: 1px solid black; /* Add border only to shape cells */
}

.cell.L {
  background-color: orange;
  border: 1px solid black; /* Add border only to shape cells */
}

.cell.O {
  background-color: yellow;
  border: 1px solid black; /* Add border only to shape cells */
}

.cell.S {
  background-color: green;
  border: 1px solid black; /* Add border only to shape cells */
}

.cell.T {
  background-color: purple;
  border: 1px solid black; /* Add border only to shape cells */
}

.cell.Z {
  background-color: red;
  border: 1px solid black; /* Add border only to shape cells */
}

.cell.hidden {
  width: 30px;
  height: 30px;
  visibility: hidden;
}

.controls h2 {
  margin: 0; /* Remove margin around score */
}

.upcoming {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.upcoming-block {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.upcoming-row {
  display: flex;
}

.cell.empty {
  visibility: hidden;
}
